---
title: "eda"
format: html
---

## Objective

Can we predict a playerâ€™s performance/worth in an upcoming season based on their previous performance stats and other metrics?

## Description of Data

We have data from qualified (300+ PAs) batters in each season from 2015 to 2024. Most of it is from Statcast but we also added the columns WAR (wins above replacement), R (runs), OPS+ (on-base plus slugging), rOBA (run-out batting average), and Rbat+ from Baseball Reference. We will predict a player's WAR in an upcoming season given their previous stats and stats from all other MLB players. The most important factors in this prediction will be WAR, Age, OPS (on-base plus slugging), xBA (expected batting average), Barrel%, K%, BB%, Rbat+ (weighted runs created +), and HR (homeruns).

## Exploratory Data Analysis

Import necessary packages

```{python}
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr
```

We need to first append the 2020 season statistics from Statcast to the rest. 2020 is a special case since because of the COVID pandemic there were less games played. We will not take into account stats such as homeruns where it is obvious that those numbers will be low and instead use percentage statistics such as batting average for the most part.

```{python}
def concat_statcast(input1, input2, output):
  try:
    df1 = pd.read_csv(input1)
    df2 = pd.read_csv(input2)
    combined_df = pd.concat([df1, df2], ignore_index=True)
    combined_df.to_csv(output, index=False)
  except:
    print("file not found error")
```

Read the two files and concat them together.

```{python}
input1 = "Statcast.csv"
input2 = "Statcast_2020.csv"
output = "Complete_Statcast.csv"
concat_statcast(input1, input2, output)
```

Next we will add the previously stated columns from the Baseball Reference data. We want to merge on the columns for the player name + the season (year). We need to do some data cleaning where the data from Baseball Reference contains symbols such as \* and \# in the player name column.

```{python}
def merge_data(input3, input4, output, columns):
  try:
    df1 = pd.read_csv(input3)
    df1['Player'] = df1['last_name, first_name'].str.split(', ').str[::-1].str.join(' ')
    all_years_df = []
    for i in input4:
      filename = f'{i}.csv'
      df2 = pd.read_csv(filename, skiprows=4, skipfooter=3, engine='python')
      df2['year'] = i 
      df2['Player'] = df2['Player'].str.replace(r'[*#]', '', regex=True).str.strip()
      df2_subset = df2[['Player', 'year'] + columns]
      all_years_df.append(df2_subset)
    combined_df2 = pd.concat(all_years_df, ignore_index=True)
    merged_df = pd.merge(df1, combined_df2, on=['Player', 'year'], how='inner')
    merged_df.to_csv(output, index=False)
    print(merged_df.info)
  except FileNotFoundError:
    print("file not found error")
```

Read the Baseball Reference files and merge.

```{python}
input3 = 'Complete_Statcast.csv'
input4 = range(2015, 2025)
columns = ['WAR', 'R', 'OPS+', 'rOBA', 'Rbat+']
output = "Complete_Data.csv"
merge_data(input3, input4, output, columns)
complete_dataset = pd.read_csv(output)
```

Now we have the complete cleaned dataset in the variable "complete_dataset". We will focus on the previously stated columns to perform our analysis.

```{python}
key_columns = ['xba', 'barrel_batted_rate', 'player_age', 'WAR', 'k_percent', 'bb_percent', 'on_base_plus_slg', 'Rbat+']
```

### Univariate Analysis (Histograms)

```{python}
# Univariate Analysis
print(data[key_columns].describe())

# Histograms
plt.figure(figsize=(16, 12))
for i, col in enumerate(key_columns, 1):
    plt.subplot(3, 3, i)
    sns.histplot(data[col], kde=True, bins=30)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.savefig('univariate.png')
plt.close()
```

We can see that most of the data is either centered or skewed left.

### Bivariate Analysis (Correlation)

```{python}
print(data[key_columns].corr())

plt.figure(figsize=(12, 8))
# xBA vs WAR
plt.subplot(2, 2, 1)
sns.scatterplot(x='xba', y='WAR', data=data)
plt.title('xBA vs WAR')
# Barrel% vs OPS
plt.subplot(2, 2, 2)
sns.scatterplot(x='barrel_batted_rate', y='WAR', data=data)
plt.title('Barrel% vs WAR')
# Age vs WAR
plt.subplot(2, 2, 3)
sns.scatterplot(x='player_age', y='WAR', data=data)
plt.title('Player Age vs WAR')
# K% vs BB%
plt.subplot(2, 2, 4)
sns.scatterplot(x='Rbat+', y='WAR', data=data)
plt.title('Rbat+ vs WAR')
plt.tight_layout()
plt.savefig('bivariate.png')
plt.close()
```

We can see that xBA vs WAR and Rbat+ vs WAR are somewhat positively correlated but Player Age vs WAR and Barrel% vs WAR are not strongly correlated.

### Multivariate Analysis (Pairplot)

```{python}
sns.pairplot(data[key_columns], diag_kind='kde', corner=True)
plt.suptitle('Pair Plot of Key Variables')
plt.savefig('multivariate.png')
plt.close()
```

We can see that for every plot most of the data points are clustered in a small area, with a few data points around that cluster. We can also see that the plots we expect to see positive correlation in such as WAR vs xBA, OPS vs BB%, etc. are indeed somewhat positively correlated while there are others that do not seem too correlated.
